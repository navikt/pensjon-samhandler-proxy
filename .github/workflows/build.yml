name: "Build and deploy"

on:
  push

jobs:
  build:
    permissions:
      contents: "read"
      checks: "write"
      id-token: "write"
      packages: "write"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    outputs:
      version: ${{ steps.version.outputs.version }}
      image: "${{ steps.login.outputs.registry }}/${{ github.repository }}/pensjon-samhandler-proxy:${{ env.VERSION }}"
      image-digest: ${{ steps.login.outputs.registry }}/${{ github.repository }}/pensjon-samhandler-proxy@${{ steps.build_push.outputs.digest }}

    steps:
      - uses: actions/checkout@v4

      - name: Set version
        id: version
        shell: bash
        run: |
          TIME=$(TZ="Europe/Oslo" date +%Y.%m.%d-%H.%M)
          COMMIT=$(git rev-parse --short=12 HEAD)
          export VERSION="$TIME-$COMMIT"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/setup-java@v5
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - uses: docker/setup-buildx-action@v3

      - name: Build
        shell: bash
        run: |
          mvn -Drevision="${VERSION}" package
        env:
          TZ: "Europe/Oslo"

      - name: Upload surefire reports on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: surefire-reports
          path: ${{ github.workspace }}/**/target/surefire-reports/*
          retention-days: 5

      - name: Upload HotSpot Fatal Error logs on failure
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: hotspot-fatal-error-logs
          path: ${{ github.workspace }}/**/hs_err_pid*.log
          retention-days: 5

      - name: NAIS login
        if: ${{ github.actor != 'dependabot[bot]' }}
        uses: nais/login@v0
        id: login
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: pensjondeployer

      - name: "Build and publish Docker image"
        if: ${{ github.actor != 'dependabot[bot]' }}
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: "${{ steps.login.outputs.registry }}/${{ github.repository }}/pensjon-samhandler-proxy:${{ env.VERSION }},${{ steps.login.outputs.registry }}/${{ github.repository }}/pensjon-samhandler-proxy:main"
          push: true
          cache-from: |
            "type=registry,ref=${{ steps.login.outputs.registry }}/${{ github.repository }}/pensjon-samhandler-proxy:main"
          cache-to: type=inline

  deploy:
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    needs: [build]
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          IMAGE: "${{ needs.build.outputs.image }}"
          RESOURCE: .nais/nais.yaml
          CLUSTER: 'prod-fss'
          VAR: "version=${{ needs.build.outputs.version }}"
          VARS: '.nais/vars-prod.yaml'

  deploySandbox:
    if: github.ref == 'refs/heads/sandbox' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    needs: [build]
    runs-on: 'ubuntu-latest'

    strategy:
      matrix:
        include:
          - env: q1
          - env: q2

    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          IMAGE: "${{ needs.build.outputs.image }}"
          RESOURCE: .nais/nais.yaml
          CLUSTER: 'dev-fss'
          VAR: "version=${{ needs.build.outputs.version }}"
          VARS: '.nais/vars-dev-${{matrix.env}}.yaml'

  deployQ0andQ5:
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      id-token: write
    needs: [build]
    runs-on: 'ubuntu-latest'

    strategy:
      matrix:
        include:
          - env: q0
          - env: q5

    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          IMAGE: "${{ needs.build.outputs.image }}"
          RESOURCE: .nais/nais.yaml
          CLUSTER: 'dev-fss'
          VAR: "version=${{ needs.build.outputs.version }}"
          VARS: '.nais/vars-dev-${{matrix.env}}.yaml'

  attest-sign:
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      contents: read
      id-token: write
    needs: [build]
    runs-on: 'ubuntu-latest'
    steps:
      - uses: actions/checkout@v4

      - name: NAIS login
        uses: nais/login@v0
        id: login
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: pensjondeployer

      - name: 'Generate SBOM'
        uses: aquasecurity/trivy-action@0.32.0
        with:
          scan-type: 'image'
          format: 'cyclonedx'
          output: 'trivy-results.cyclonedx'
          image-ref: "${{ needs.build.outputs.image-digest }}"

      - name: Attest and sign image
        id: attest-sign
        uses: nais/attest-sign@v1
        with:
          image_ref: "${{ needs.build.outputs.image-digest }}"
          sbom: "trivy-results.cyclonedx"
